#!/bin/bash
#
# This script is designed to be run inside the container
#

# fail hard and fast even on pipelines
set -eo pipefail

# set debug based on envvar
[[ $DEBUG ]] && set -x

# functions

function etcd_set_default {
  etcdctl --no-sync -C $ETCD mk $ETCD_PATH/$1 $2 >/dev/null 2>&1 || true
}

function etcd_make_directory {
  etcdctl --no-sync -C $ETCD setdir $ETCD_PATH/$1 >/dev/null 2>&1 || true
}

function on_exit() {
    kill -TERM $SERVICE_PID
    wait $SERVICE_PID 2>/dev/null
    exit 0
}

function cluster_members() {
  for key in $(etcdctl --no-sync -C $ETCD ls $ETCD_PATH/cluster/galeraEndpoints); do
    value=$(etcdctl --no-sync -C $ETCD get $key)
    echo $key:$value
    LIST+="$(basename $value),"
  done
  CLUSTER_MEMBERS=$(echo $LIST | sed 's/,$//')
}

function publish_to_etcd() {
  if [[ -z $CLUSTER ]]; then
    etcdctl $ETCD_OPTIONS set $ETCD_PATH/host $HOST --ttl $ETCD_TTL >/dev/null
    etcdctl $ETCD_OPTIONS set $ETCD_PATH/port $PUBLISH --ttl $ETCD_TTL >/dev/null
  else
    etcdctl $ETCD_OPTIONS set $ETCD_PATH/cluster/galeraEndpoints/$HOSTNAME $HOST:4567 --ttl $ETCD_TTL >/dev/null
    etcdctl $ETCD_OPTIONS set $ETCD_PATH/cluster/mysqlNodes/$HOSTNAME $HOST:$PUBLISH --ttl $ETCD_TTL >/dev/null
  fi
}

# configure etcd
export ETCD_PORT=${ETCD_PORT:-4001}
export ETCD="$HOST:$ETCD_PORT"
export ETCD_PATH=${ETCD_PATH:-/database}
export ETCD_TTL=${ETCD_TTL:-10}
export ETCD_OPTIONS="--no-sync -C $ETCD"

# wait for etcd to be available
until etcdctl --no-sync -C $ETCD ls >/dev/null 2>&1; do
  echo "waiting for etcd at $ETCD..."
  sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

# wait until etcd has discarded potentially stale values
sleep $(($ETCD_TTL+1))

# initialize data volume
chown -R mysql:mysql /var/lib/mysql
if [[ ! -d /var/lib/mysql/mysql ]]; then
  echo "=> An empty or uninitialized database is detected in /var/lib/mysql"
  echo "=> Creating database..."
  mysql_install_db > /dev/null 2>&1
  echo "=> Done!"
else
  echo "=> Using an existing database"
fi

MYSQL_USER=${MYSQL_USER:-admin}
MYSQL_PASS=${MYSQL_PASS:-admin}
REP_USER=${REP_USER:-replicator}
REP_PASS=${REP_PASS:-replicator}
BOOTSTRAP=0
PORT=${PUBLISH:-3306}
PROTO=${PROTO:-tcp}

etcd_set_default engine percona
etcd_set_default credentials/adminUser ${MYSQL_USER}
etcd_set_default credentials/adminPass ${MYSQL_PASS}
etcd_set_default credentials/repUser ${REP_USER}
etcd_set_default credentials/repPass ${REP_PASS}
etcd_set_default host $HOST
etcd_set_default port $PORT

if [[ ! -z $CLUSTER ]]; then
  etcd_set_default cluster/name ${CLUSTER}
  etcd_make_directory cluster/mysqlNodes
  etcd_make_directory cluster/galeraEndpoints
fi

# wait for confd to run once and install initial templates
until confd -onetime -node $ETCD -config-file /app/confd.toml; do
  echo "database: waiting for confd to write initial templates..."
  sleep $(($ETCD_TTL/2))  # sleep for half the TTL
done

echo starting mysql in order to set up passwords

mysqld_safe --skip-syslog --verbose &
echo sleeping for 20 seconds, then testing if DB is up.
sleep 20
while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done
/app/bin/database_creds

echo stopping mysql after setting up passwords
mysqladmin shutdown

WSREP_OPTIONS="--wsrep_node_address=$HOST --skip-syslog --verbose"

echo Starting MySQL for reals

cluster_members

if [[ -z $CLUSTER_MEMBERS ]]; then 
  # Perform Election
  $ELECTION_PATH=$ETCD_PATH/election
  etcdctl $ETCD_OPTIONS ls $ETCD_PATH/election || etcdctl $ETCD_OPTIONS mkdir $ELECTION_PATH
  if etcdctl $ETCD_OPTIONS mk $ELECTION_PATH/bootstrap $HOSTNAME >/dev/null 2>&1; then
    BOOTSTRAP=1
    mysqld_safe --wsrep-new-cluster $WSREP_OPTIONS &
  else
    until etcdctl $ETCD_OPTIONS get $ETCD_PATH/election/ready >/dev/null 2>&1; do
      echo "waiting on bootstrap..."
      sleep 20
    done
    mysqld_safe --wsrep_cluster_address=gcomm://$CLUSTER_MEMBERS $WSREP_OPTIONS &
  fi
else
  mysqld_safe --wsrep_cluster_address=gcomm://$CLUSTER_MEMBERS $WSREP_OPTIONS &
fi


SERVICE_PID=$!

echo $SERVICE_PID > /app/database.pid

# smart shutdown on SIGINT and SIGTERM
trap on_exit INT TERM

# spawn confd in the background to update services based on etcd changes
confd -node $ETCD -config-file /app/confd.toml &
CONFD_PID=$!

# wait for the service to become available
echo sleeping for 20 seconds, then testing if DB is up.
sleep 20
while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done

echo database running...

if [[ ! -z $BOOTSTRAP ]]; then
  publish_to_etcd
  etcdctl $ETCD_OPTIONS set $ELECTION_PATH/ready true --ttl 300 >/dev/null
fi

# publish the service to etcd using the injected HOST and PORT
if [[ ! -z $PUBLISH ]]; then

  set +e

  # wait for the service to become available on PUBLISH port
  sleep 1 && while [[ -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do sleep 1; done

  # while the port is listening, publish to etcd
  while [[ ! -z $(netstat -lnt | awk "\$6 == \"LISTEN\" && \$4 ~ \".$PUBLISH\" && \$1 ~ \"$PROTO.?\"") ]] ; do
    publish_to_etcd
    sleep $(($ETCD_TTL/2)) # sleep for half the TTL
  done

  # if the loop quits, something went wrong
  exit 1

fi

wait
